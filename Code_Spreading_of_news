# -*- coding: utf-8 -*-

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.mlab as mlab
import scipy.stats as stats
from enum import *
import matplotlib.patches as mpatches #for legends in the graph
import random
from random import triangular
import sys #for printing to screen in a special way
import operator #standard python library used for sorting
from enum import * # used for the states S,I,R
import copy

G = nx.watts_strogatz_graph(5000, 70, 0.2)

def rand_mean(mean):
    mean_tmp = mean*10
    a=0
    b=10
    c=(3*mean_tmp)-a-b
    test = [triangular(a, b, c) for _ in range(10)]  #random.triangular(low, high, mode)
    result_tmp = sum(test)/10
    result = result_tmp/10
    return (result)


#Code creating G here with random opinion and polarization
for i in G.nodes():
    G.node[i]['opinion'] = rand_mean(0.3)
    G.node[i]['polarization'] = 2*G.node[i]['opinion']-1
    
#Edge homogeneity
for (u, v) in G.edges():
    G.edge[u][v]['homogeneity'] = G.node[u]['polarization']*G.node[v]['polarization']

# PDF Function of Opinion values
opinion_list = []
for i in G.nodes():
        opinion_list.append(G.node[i]['opinion'])

n, bins, patches = plt.hist(opinion_list, 50, normed=1)
mu_opinion = np.mean(opinion_list)
sigma_opinion = np.std(opinion_list)
plt.plot(bins, mlab.normpdf(bins, mu_opinion, sigma_opinion))
plt.ylabel('Probability density function')
plt.xlabel('Values')
plt.title("Individual's opinions")
plt.show()

# PDF Function of Homogeneity values
homogeneity_list = []
for (u, v) in G.edges():
        homogeneity_list.append(G.edge[u][v]['homogeneity'])

n, bins, patches = plt.hist(homogeneity_list, 50, normed=1)
mu = np.mean(homogeneity_list)
sigma = np.std(homogeneity_list)
plt.plot(bins, mlab.normpdf(bins, mu, sigma))
plt.ylabel('Probability density function')
plt.xlabel('Values')
plt.title("Mean Edge Homogeneity")
plt.show()
print("mean homogeneity", mu)
print("Nodes", G.number_of_nodes())
print("Edges", G.number_of_edges())


threshold=0.3#threshold for news to be shared
size=0
val=0
value = []
list_of_sharing_neighbours = [] #list of neighbours who shares news

#News weight
news = 0.7

#Sharing algorithm
node_list_tmp = []
for n in G:
    if abs(G.node[n]['opinion'] - news) < threshold:
        for k in G.neighbors(n):
            if k not in list_of_sharing_neighbours:
                if abs(G.node[k]['opinion'] - news) < threshold:
                    size+=1 #size of the sharing graph
                    list_of_sharing_neighbours.append(k)

pos = nx.spring_layout(G)
plt.axis('off')

#Visualization of the algorithm
blue_edges = list_of_sharing_neighbours
yellow_edges = [node for node in G.nodes() if node not in blue_edges]

nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), nodelist=blue_edges,
                       node_color = 'c', node_size = 500)
nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), nodelist=yellow_edges,
                       node_color = 'y', node_size = 500)

nx.draw_networkx_labels(G, pos)
nx.draw_networkx_edges(G, pos, arrows=False)                  
print ("Infected", list_of_sharing_neighbours.__len__())
print("Blue = Infected")
print("threshold", threshold)
print("news opinion", news)
print("Cascade size", size)  


